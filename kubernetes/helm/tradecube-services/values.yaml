# Check with:
# helm3 lint tradecube-services
# OPTIONS='--dry-run --debug'
# Run with:
# cd TradeCube-Services/kubernetes/helm
# 
# KUBERNETES_CONTEXT=
# TRADECUBE_SERVICES_NAMESPACE=
# TRADECUBE_SERVICES_TAG=
# TRADECUBE_SERVICES_DOMAIN=
# TRADECUBE_SERVICES_CERTFILE=
# TRADECUBE_SERVICES_CERTPASSWORD=
# TRADECUBE_API_DOMAIN=
# LETS_ENCRYPT_CLUSTER_ISSUER=
# 
# helm upgrade --kube-context ${KUBERNETES_CONTEXT} ${TRADECUBE_SERVICES_NAMESPACE} --install --namespace ${TRADECUBE_SERVICES_NAMESPACE} --set image.servicesTag=${TRADECUBE_SERVICES_TAG}  --set ingress.domain=${TRADECUBE_SERVICES_DOMAIN}  --set env.certificateNameSuffix=${TRADECUBE_SERVICES_CERTFILE}  --set env.certPassword=${TRADECUBE_SERVICES_CERTPASSWORD}  --set env.apiDomain=${TRADECUBE_API_DOMAIN}  --set letsencrypt.clusterIssuer=${LETS_ENCRYPT_CLUSTER_ISSUER}  tradecube-services ${OPTIONS}
name:
  name: 'Tradecube-Services' # {{ .Values.name.name }}

env:
  HTTPPrefix: http://                  # {{ .Values.env.HTTPPrefix }}
  HTTPSPrefix: https://                # {{ .Values.env.HTTPSPrefix }}
  certificateNamePrefix: /certs/       # {{ .Values.env.certificateNamePrefix }}     
  certificateNameSuffix: <not-set>     # {{ .Values.env.certificateNameSuffix }}
  certPassword: <not-set>              # {{ .Values.env.certPassword }}
  environment: <not-set>               # {{ .Values.env.environment }}
  apiDomain: https://api.tradecube.io  # {{ .Values.env.apiDomain }}
  apiPort: 443                         # {{ .Values.env.apiPort }}
  jsreportDomain: http://localhost     # {{ .Values.env.jsreportDomain }}
  jsreportPort: 5488                   # {{ .Values.env.jsreportPort }}

equias:
  requestTokenURI: /eBOWebApi/api/v1.0/Token/RequestToken               # {{ .Values.equias.requestTokenURI }}
  getTradeStatusURI: /eBOWebApi/api/v1.0/Trade/GetTradeStatus           # {{ .Values.equias.getTradeStatusURI }}
  addPhysicalTradeURI: /eBOWebApi/api/v1.0/Trade/AddPhysicalTrade       # {{ .Values.equias.addPhysicalTradeURI }}
  modifyPhysicalTradeURI: /eBOWebApi/api/v1.0/Trade/ModifyPhysicalTrade # {{ .Values.equias.modifyPhysicalTradeURI }}
  cancelTradeURI: /eBOWebApi/api/v1.0/Trade/CancelTrade                 # {{ .Values.equias.cancelTradeURI }}

fidectus:
  confirmationURI: /api/v1/confirmation                     # {{ .Values.fidectus.confirmationURI }}
  confirmationBoxResultURI: /api/v1/confirmation-box-result # {{ .Values.fidectus.confirmationBoxResultURI }}


service:
  port: 80       # {{ .Values.service.port }}
  targetPort: 80 # {{ .Values.service.targetPort }}
  httpPort: 80   # {{ .Values.service.httpPort }}
  httpsPort: 443 # {{ .Values.service.httpsPort }}
  protocol: TCP  # {{ .Values.service.protocol }}

ingress:
  domain: services.example.com

type:
  certificate: -certificate        # {{ .Values.type.certificate }}
  configmap: -config-map           # {{ .Values.type.configmap }}
  deployment: -deployment          # {{ .Values.type.deployment }}
  ingress: -ingress                # {{ .Values.type.ingress }}
  pod: -pod                        # {{ .Values.type.pod }}
  secret: -secret                  # {{ .Values.type.secret }}
  service: -service                # {{ .Values.type.service }}
  serviceaccount: -service-account # {{ .Values.type.serviceaccount }}

component:
  services: -services         # {{ .Values.component.services }}
  pfxgenerator: -pfxgenerator # {{ .Values.component.pfxgenerator }}

letsencrypt:
  clusterIssuer: <TBA>        # {{ .Values.letsencrypt.clusterIssuer }}

certificate:
  volumeName: -cert-volume # {{ .Values.certificate.volumeName }}  
  volumeMountPath: /certs  # {{ .Values.certificate.volumeMountPath }}

image:
  repository: ctrmcubed                     # {{ .Values.image.repository }}
  pullPolicy: IfNotPresent                  # {{ .Values.image.pullPolicy }}
  services: tradecube-services              # {{ .Values.image.services }}
  servicesTag: latest-dev                   # {{ .Values.image.servicesTag }}
  jsreportRepo: jsreport                    # {{ .Values.image.jsreportRepo }}
  jsreport: jsreport                        # {{ .Values.image.jsreport }}
  jsreportTag: 2.7.1-full                   # {{ .Values.image.jsreportTag }}
  pfxgenerator: pfxgenerator                # {{ .Values.image.pfxgenerator }}


port:   
  services: 44370     # {{ .Values.port.services }}
  servicesSsl: 44365  # {{ .Values.port.servicesSsl }}

restartPolicy:
  services: Always     # {{ .Values.restartPolicy.services }}
  pfxgenerator: Always # {{ .Values.restartPolicy.pfxgenerator }}


replicas:
  services: 1     # {{ .Values.replicas.services }}
  pfxgenerator: 1 # {{ .Values.replicas.pfxgenerator }}

strategy:                
  type: RollingUpdate # {{ .Values.strategy.type }}
  maxSurge: 1         # {{ .Values.strategy.maxSurge }}
  maxUnavailable: 0   # {{ .Values.strategy.maxUnavailable }}

readinessProbe:           
  path: /health           # {{ .Values.readinessProbe.path }}
  initialDelaySeconds: 10 # {{ .Values.readinessProbe.initialDelaySeconds }}
  periodSeconds: 10       # {{ .Values.readinessProbe.periodSeconds }}
  timeoutSeconds: 2       # {{ .Values.timeoutSeconds.timeoutSeconds }}

livenessProbe:
  path: /health            # {{ .Values.livenessProbe.path }}
  initialDelaySeconds: 120 # {{ .Values.livenessProbe.initialDelaySeconds }}
  periodSeconds: 30        # {{ .Values.livenessProbe.periodSeconds }}
  timeoutSeconds: 2        # {{ .Values.timeoutSeconds.timeoutSeconds }} 